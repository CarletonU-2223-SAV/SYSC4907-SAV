<launch>
  <arg name="host" default="127.0.0.1" />
  <param name="/host_ip" type="string" value="$(arg host)" /> <!-- set global host_ip param -->

  <arg name="path" default="new_coords.pickle" />
  <param name="/path_file" type="string" value="$(arg path)" /> <!-- set path to vehicle's path file -->

  <arg name="log" default="false" />

  <node name="central_control" pkg="central_control" type="central_control.py" />
  <node name="lane_keep_assist" pkg="lane_keep_assist" type="send_lane.py" />

<!-- We're not using this node for now because the sign and car recognition are the same node for now -->
<!--   <node name="car_detect" pkg="sign_car_recognition" type="car_detect.py" /> -->
  <node name="sign_detect" pkg="sign_car_recognition" type="sign_detect.py" />
  <node name="object_detect" pkg="lidar_object_recognition" type="lidar_object_detect.py" />

  <node name="cruise_control" pkg="cruise_control" type="cruise_control.py" />
  <node name="speedometer" pkg="sensors" type="speedometer.py" />

   <!-- Making navigation node required results in ROS shutting down after the entire path has been navigated.
        This is needed for automated testing. -->
  <node name="navigation" pkg="mapping_navigation" type="navigation.py" required = "true"/>

  <node name="lidar" pkg="sensors" type="lidar.py" />
  <node name="car_image_raw" pkg="sensors" type="car_image_raw.py" />
  <node name="car_pose" pkg="sensors" type="car_pose.py" />
  <node name="segmented_image" pkg="sensors" type="segmented_image.py" />
  <node name="logging" pkg="sensors" type="logging.py" if="$(arg log)" /> <!-- Launch logging node if flag is set -->
  <node name="binvox_gene" pkg="ros_navigation" type="Ros_nav.py" />
  <!--<node pkg="sensor_node_pkg" type="sensor_node_type" name="sensor_node_name" output="screen">
    <param name="sensor_param" value="param_value" />
  </node>
  <node pkg="odom_node_pkg" type="odom_node_type" name="odom_node" output="screen">
    <param name="odom_param" value="param_value" />
  </node>
  <node pkg="transform_configuration_pkg" type="transform_configuration_type" name="transform_configuration_name" output="screen">
    <param name="transform_configuration_param" value="param_value" />
  </node>--> <!-- This is the waiting to be implemented-->
  <node name="logging" pkg="sensors" type="vehicle_logging.py" if="$(arg log)" /> <!-- Launch logging node if flag is set -->
</launch>